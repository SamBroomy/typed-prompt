[project]
name = "typed-prompt"
version = "0.1.0"
description = "A simple type-safe, validated prompt management system for LLMs"
readme = "README.md"
authors = [
    { name = "SamBroomy", email = "36888606+SamBroomy@users.noreply.github.com" },
]
requires-python = ">=3.10"
keywords = [
    "llm",
    "prompt-engineering",
    "type-safety",
    "templating",
    "pydantic",
    "jinja2",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = ["jinja2>=3.0.1", "pydantic>=2.0.0"]

[project.urls]
Homepage = "https://github.com/SamBroomy/typed-prompt"
Documentation = "https://github.com/SamBroomy/typed-prompt#readme"
Repository = "https://github.com/SamBroomy/typed-prompt.git"
Changelog = "https://github.com/SamBroomy/typed-prompt/blob/main/CHANGELOG.md"


[dependency-groups]
dev = [
    "bumpversion>=0.6.0",
    "pre-commit>=4.0.1",
    "pylint>=3.3.2",
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "refurb>=2.0.0",
    "ruff>=0.8.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = """
-v
--doctest-modules
--cov=typed_prompt
--cov-report=term-missing
--cov-report=html
"""

[tool.coverage.run]
source = ["typed_prompt"]
branch = true
omit = ["tests/*", "examples/user.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "raise ImportError",
]
show_missing = true
fail_under = 80

[tool.coverage.html]
directory = "htmlcov_report"

[tool.ruff]
target-version = "py312"

[tool.bumpversion]
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "^version = \"{current_version}\"$"
replace = "version = \"{new_version}\""
regex = true
ignore_missing_version = false
ignore_missing_files = false
tag = false
sign_tags = false
tag_name = "{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = true
commit = false
message = "Bump version: {current_version} → {new_version}"
commit_args = ""
setup_hooks = []
pre_commit_hooks = []
post_commit_hooks = []


[tool.lint]
select = ["E", "F"]
line-length = 120
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py312"
[tool.lint.per-file-ignores]
"examples/user.py" = ["E501"]


[tool.pylint.format]
max-line-length = 120

[tool.pylint."messages control"]
disable = ["too-few-public-methods", "signature-differs", "too-many-locals"]
